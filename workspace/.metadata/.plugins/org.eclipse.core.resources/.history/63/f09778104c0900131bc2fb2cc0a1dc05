package com.infonow.domino

import org.springframework.dao.DataIntegrityViolationException


class DataFileController {

    static allowedMethods = [save: "POST", update: "POST", delete: "POST"]
	
	def search() {

		if(params.id){
			def dataFileInstance = DataFile.get(params.id)
			if(!dataFileInstance){
				flash.message = "DataFile with id: ${params.id} not found."
			}
			else{
				//get parseConfiguration for parserAttempt
					//config service_name = ‘parserService’, customer_sid , reporting_partner_sid ,df.data_type = carp.name
				//get baseConfiguration for baseParser

				if(!parseConfiguration){
					flash.message = "Unable to locate configuration for ${dataFileInstance.customerSid}, ${dataFileInstance.reportingPartnerSid}, ${dataFileInstance.dataType}"
				}
				else{				
					def parseFields = [:]
					def baseFields = [:]
					def fileData = [:]
					parseFields = getFields(parseConfiguration.xmlData)
					if(baseConfiguration){
						baseFields = getFields(baseConfiguration.xmlData)
					}
					fileData = getFileData(dataFileInstance)
					[parseFields:parseFields,baseFields:baseFields,fileData:fileData]
				}
				
			}
		}
		
		
	}
	
	def getFileData(DataFile dataFile){
		//TODO
		//Excel or csv, get two rows, return in map of split fields map
		[:]
	}
	
	def getFields(String xml){
		//TODO return map of fields, addresses
		[:]
	}

    def index() {
        redirect(action: "search", params: params)
    }

    def list(Integer max) {
        params.max = Math.min(max ?: 10, 100)
        [dataFileInstanceList: DataFile.list(params), dataFileInstanceTotal: DataFile.count()]
    }

    def create() {
        [dataFileInstance: new DataFile(params)]
    }

    def save() {
        def dataFileInstance = new DataFile(params)
        if (!dataFileInstance.save(flush: true)) {
            render(view: "create", model: [dataFileInstance: dataFileInstance])
            return
        }

        flash.message = message(code: 'default.created.message', args: [message(code: 'dataFile.label', default: 'DataFile'), dataFileInstance.id])
        redirect(action: "show", id: dataFileInstance.id)
    }

    def show(Long id) {
        def dataFileInstance = DataFile.get(id)
        if (!dataFileInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'dataFile.label', default: 'DataFile'), id])
            redirect(action: "list")
            return
        }

        [dataFileInstance: dataFileInstance]
    }

    def edit(Long id) {
        def dataFileInstance = DataFile.get(id)
        if (!dataFileInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'dataFile.label', default: 'DataFile'), id])
            redirect(action: "list")
            return
        }

        [dataFileInstance: dataFileInstance]
    }

    def update(Long id, Long version) {
        def dataFileInstance = DataFile.get(id)
        if (!dataFileInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'dataFile.label', default: 'DataFile'), id])
            redirect(action: "list")
            return
        }

        if (version != null) {
            if (dataFileInstance.version > version) {
                dataFileInstance.errors.rejectValue("version", "default.optimistic.locking.failure",
                          [message(code: 'dataFile.label', default: 'DataFile')] as Object[],
                          "Another user has updated this DataFile while you were editing")
                render(view: "edit", model: [dataFileInstance: dataFileInstance])
                return
            }
        }

        dataFileInstance.properties = params

        if (!dataFileInstance.save(flush: true)) {
            render(view: "edit", model: [dataFileInstance: dataFileInstance])
            return
        }

        flash.message = message(code: 'default.updated.message', args: [message(code: 'dataFile.label', default: 'DataFile'), dataFileInstance.id])
        redirect(action: "show", id: dataFileInstance.id)
    }

    def delete(Long id) {
        def dataFileInstance = DataFile.get(id)
        if (!dataFileInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'dataFile.label', default: 'DataFile'), id])
            redirect(action: "list")
            return
        }

        try {
            dataFileInstance.delete(flush: true)
            flash.message = message(code: 'default.deleted.message', args: [message(code: 'dataFile.label', default: 'DataFile'), id])
            redirect(action: "list")
        }
        catch (DataIntegrityViolationException e) {
            flash.message = message(code: 'default.not.deleted.message', args: [message(code: 'dataFile.label', default: 'DataFile'), id])
            redirect(action: "show", id: id)
        }
    }
}
